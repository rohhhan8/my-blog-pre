import{c as g,d}from"./index-0685d0f1.js";const m=async()=>{try{const e=sessionStorage.getItem("cachedBlogs"),o=sessionStorage.getItem("blogsCacheTimestamp"),t=(o?Date.now()-parseInt(o):1/0)<5*60*1e3;if(e&&t)try{const l=JSON.parse(e);if(Array.isArray(l)&&l.length>0)return console.log("Using cached blogs from sessionStorage in getAllBlogs"),setTimeout(()=>{S()},100),l}catch(l){console.error("Error parsing cached blogs:",l)}const a=await g.get("/blogs/");try{sessionStorage.setItem("cachedBlogs",JSON.stringify(a.data)),sessionStorage.setItem("blogsCacheTimestamp",Date.now().toString()),console.log("Cached blogs in sessionStorage")}catch(l){console.error("Error caching blogs:",l)}return a.data}catch(e){console.error("Error fetching all blogs with apiClient:",e);try{const o=sessionStorage.getItem("cachedBlogs");if(o){const s=JSON.parse(o);if(Array.isArray(s)&&s.length>0)return console.log("Using cached blogs as fallback after API error"),s}}catch(o){console.error("Error using cached blogs as fallback:",o)}try{console.log("Trying direct axios call as fallback");const o=await d.get("/api/blogs/");try{sessionStorage.setItem("cachedBlogs",JSON.stringify(o.data)),sessionStorage.setItem("blogsCacheTimestamp",Date.now().toString())}catch(s){console.error("Error caching blogs from fallback:",s)}return o.data}catch(o){throw console.error("All attempts to fetch blogs failed:",o),o}}},S=async()=>{try{console.log("Refreshing blogs in background");try{const o=await g.get("/blogs/");try{sessionStorage.setItem("cachedBlogs",JSON.stringify(o.data)),sessionStorage.setItem("blogsCacheTimestamp",Date.now().toString()),console.log("Updated cached blogs in background")}catch(s){console.error("Error updating cached blogs:",s)}return}catch(o){console.error("Background refresh with apiClient failed:",o)}const e=await d.get("/api/blogs/");try{sessionStorage.setItem("cachedBlogs",JSON.stringify(e.data)),sessionStorage.setItem("blogsCacheTimestamp",Date.now().toString()),console.log("Updated cached blogs in background with fallback")}catch(o){console.error("Error updating cached blogs with fallback:",o)}}catch(e){console.error("Background refresh of blogs failed:",e)}},y=async(e,o,s={})=>{console.log(`Attempting to delete blog with ID: ${e}`);let t={};try{const c=o.split(".");if(c.length===3){const r=JSON.parse(atob(c[1]));t={"X-User-ID":r.user_id||r.sub||"","X-User-Email":r.email||"","X-User-Name":r.name||""},console.log("Extracted user info from token:",t),localStorage.setItem("userInfo",JSON.stringify({uid:r.user_id||r.sub||"",email:r.email||"",displayName:r.name||""}))}}catch(c){console.error("Error extracting user info from token:",c)}const a={Authorization:`Bearer ${o}`,"Content-Type":"application/json",...t,...s};localStorage.setItem("authToken",o);let l="";try{const c=o.split(".");if(c.length===3){const r=JSON.parse(atob(c[1]));l=r.user_id||r.sub||"",!l&&r.firebase&&r.firebase.identities&&r.firebase.identities.email&&(l=r.firebase.identities.email[0],console.log("Using email as uid fallback:",l)),!l&&r.email&&(l=r.email,console.log("Using email as uid fallback:",l)),localStorage.setItem("userUid",l),console.log("Token payload for debugging:",r)}}catch(c){console.error("Error extracting uid from token:",c)}a["X-User-UID"]=l,a.uid=l,t.uid=l,g.setAuthToken(o,{uid:l,email:t["X-User-Email"],displayName:t["X-User-Name"]});try{console.log(`Making DELETE request to /blogs/${e}/ using apiClient`),console.log("With headers:",a);const c=await g.delete(`/blogs/${e}/`,{headers:a});console.log("Delete successful with apiClient:",c);try{const r=JSON.parse(localStorage.getItem("likedBlogs")||"{}");r[e]&&(delete r[e],localStorage.setItem("likedBlogs",JSON.stringify(r)),console.log(`Removed blog ${e} from liked blogs in localStorage`))}catch(r){console.error("Error updating localStorage:",r)}try{const i=JSON.parse(sessionStorage.getItem("cachedBlogs")||"[]").filter(n=>n._id!==e);sessionStorage.setItem("cachedBlogs",JSON.stringify(i)),console.log(`Removed blog ${e} from cached blogs in sessionStorage`)}catch(r){console.error("Error updating sessionStorage:",r)}return c}catch(c){console.error("Delete with apiClient failed:",c);try{console.log(`Making DELETE request to /api/blogs/${e}/`);const r=await d.delete(`/api/blogs/${e}/`,{headers:a});console.log("Delete successful with trailing slash:",r);try{const n=JSON.parse(sessionStorage.getItem("cachedBlogs")||"[]").filter(f=>f._id!==e);sessionStorage.setItem("cachedBlogs",JSON.stringify(n))}catch(i){console.error("Error updating sessionStorage:",i)}return r}catch(r){console.log("Delete with trailing slash failed:",r);try{console.log(`Making DELETE request to /api/blogs/${e}`);const i=await d.delete(`/api/blogs/${e}`,{headers:a});console.log("Delete successful without trailing slash:",i);try{const f=JSON.parse(sessionStorage.getItem("cachedBlogs")||"[]").filter(h=>h._id!==e);sessionStorage.setItem("cachedBlogs",JSON.stringify(f))}catch(n){console.error("Error updating sessionStorage:",n)}return i}catch(i){console.log("Delete without trailing slash failed:",i),console.log("Trying with fetch API as last resort");const n=new Date().getTime(),f=`/api/blogs/${e}/?_=${n}`,h=await fetch(f,{method:"DELETE",headers:a});if(!h.ok)throw new Error(`Fetch delete failed with status ${h.status}`);console.log("Delete successful with fetch API:",h);try{const p=JSON.parse(sessionStorage.getItem("cachedBlogs")||"[]").filter(b=>b._id!==e);sessionStorage.setItem("cachedBlogs",JSON.stringify(p))}catch(u){console.error("Error updating sessionStorage:",u)}return{status:h.status}}}}},E=async(e,o)=>{g.setAuthToken(o);try{const s=await g.post(`/blogs/${e}/like/`,{});try{const t=JSON.parse(localStorage.getItem("likedBlogs")||"{}");s.data.status==="liked"?t[e]=!0:delete t[e],localStorage.setItem("likedBlogs",JSON.stringify(t)),console.log(`Updated like status for blog ${e} in localStorage:`,s.data.status)}catch(t){console.error("Error updating localStorage:",t)}return s.data}catch(s){console.error("Error liking blog with apiClient:",s);try{const t=await d.post(`/api/blogs/${e}/like/`,{},{headers:{Authorization:`Bearer ${o}`}});try{const a=JSON.parse(localStorage.getItem("likedBlogs")||"{}");t.data.status==="liked"?a[e]=!0:delete a[e],localStorage.setItem("likedBlogs",JSON.stringify(a))}catch(a){console.error("Error updating localStorage:",a)}return t.data}catch(t){throw console.error("Error liking blog with fallback:",t),t}}},B=async e=>{console.log("Fetching liked blogs with token:",e.substring(0,10)+"..."),g.setAuthToken(e);try{const o=await g.get("/blogs/liked/",{headers:{"Cache-Control":"no-cache",Pragma:"no-cache"}});console.log("Liked blogs fetched successfully with apiClient:",o.data);const s=Array.isArray(o.data)?o.data:[];try{const t={};s.forEach(a=>{t[a._id]=!0}),localStorage.setItem("likedBlogs",JSON.stringify(t)),console.log("Updated liked blogs in localStorage")}catch(t){console.error("Error updating localStorage:",t)}return s}catch(o){console.error("Error fetching liked blogs with apiClient:",o);try{console.log("Trying to get liked blogs from localStorage");const s=JSON.parse(localStorage.getItem("likedBlogs")||"{}"),t=Object.keys(s).filter(a=>s[a]);if(t.length>0){console.log("Found liked blog IDs in localStorage:",t);try{const a=await m();if(Array.isArray(a)){const l=a.filter(c=>t.includes(c._id));return l.forEach(c=>{c.is_liked=!0}),console.log("Reconstructed liked blogs from localStorage:",l),l}}catch(a){console.error("Error fetching all blogs for liked blogs fallback:",a)}}}catch(s){console.error("Error reading from localStorage:",s)}try{const s=await d.get("/api/blogs/liked/",{headers:{Authorization:`Bearer ${e}`,"Cache-Control":"no-cache",Pragma:"no-cache"}});return console.log("Liked blogs fetched successfully with direct axios:",s.data),s.data}catch(s){console.error("Error fetching liked blogs with direct axios:",s);try{const t=await d.get("/api/blogs/liked",{headers:{Authorization:`Bearer ${e}`,"Cache-Control":"no-cache",Pragma:"no-cache"}});return console.log("Liked blogs fetched successfully without trailing slash:",t.data),t.data}catch{return console.error("All attempts to fetch liked blogs failed"),[]}}}};export{B as a,y as d,m as g,E as l};
